#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–∞
"""

import sys
import subprocess
import importlib

def check_python():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python...")
    version = sys.version_info
    print(f"   –í–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version < (3, 7):
        print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        return False
    else:
        print("   ‚úÖ –í–µ—Ä—Å–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è")
        return True

def check_module(module_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è"""
    try:
        importlib.import_module(module_name)
        print(f"   ‚úÖ {module_name} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print(f"   ‚ùå {module_name} - –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_pytesseract():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è pytesseract"""
    try:
        import pytesseract
        version = pytesseract.get_tesseract_version()
        print(f"   ‚úÖ pytesseract - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: {version})")
        return True
    except ImportError:
        print("   ‚ùå pytesseract - –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"   ‚ö†Ô∏è  pytesseract - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞: {e}")
        return False

def check_tesseract_binary():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR –≤ —Å–∏—Å—Ç–µ–º–µ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR...")
    try:
        result = subprocess.run(['tesseract', '--version'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            version_line = result.stdout.split('\n')[0]
            print(f"   ‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω: {version_line}")
            return True
        else:
            print("   ‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("   ‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        return False

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        'telegram_bot_automator_v2.py',
        'config.py',
        'requirements.txt'
    ]
    
    all_found = True
    for file in required_files:
        try:
            with open(file, 'r', encoding='utf-8') as f:
                pass
            print(f"   ‚úÖ {file} - –Ω–∞–π–¥–µ–Ω")
        except FileNotFoundError:
            print(f"   ‚ùå {file} - –ù–ï –Ω–∞–π–¥–µ–Ω")
            all_found = False
        except Exception as e:
            print(f"   ‚ö†Ô∏è  {file} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
            all_found = False
    
    return all_found

def install_missing():
    """–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("   ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¢–û–†–ê")
    print("=" * 60)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    python_ok = check_python()
    print()
    
    if not python_ok:
        print("‚ùå Python –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
    print("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π...")
    modules = [
        'pyautogui',
        'cv2',  # opencv-python
        'keyboard',
        'psutil',
        'numpy',
        'PIL'   # pillow
    ]
    
    modules_ok = all(check_module(module) for module in modules)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ pytesseract
    pytesseract_ok = check_pytesseract()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR
    tesseract_ok = check_tesseract_binary()
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    files_ok = check_files()
    print()
    
    # –ò—Ç–æ–≥
    print("=" * 60)
    print("üìä –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:")
    print(f"   Python: {'‚úÖ' if python_ok else '‚ùå'}")
    print(f"   –ú–æ–¥—É–ª–∏: {'‚úÖ' if modules_ok else '‚ùå'}")
    print(f"   Pytesseract: {'‚úÖ' if pytesseract_ok else '‚ùå'}")
    print(f"   Tesseract OCR: {'‚úÖ' if tesseract_ok else '‚ùå'}")
    print(f"   –§–∞–π–ª—ã: {'‚úÖ' if files_ok else '‚ùå'}")
    
    all_ok = all([python_ok, modules_ok, pytesseract_ok, tesseract_ok, files_ok])
    
    if all_ok:
        print("\nüéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ì–û–¢–û–í–´!")
        print("   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É:")
        print("   python telegram_bot_automator_v2.py")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏:")
        
        if not modules_ok:
            print("   üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏:")
            print("      pip install -r requirements.txt")
        
        if not tesseract_ok:
            print("   üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract OCR:")
            print("      https://github.com/UB-Mannheim/tesseract/wiki")
        
        if not files_ok:
            print("   üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
    
    print("=" * 60)
    
    return all_ok

if __name__ == "__main__":
    try:
        success = main()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")