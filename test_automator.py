#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
"""

import pyautogui
import time
import logging
import pytesseract
import cv2
import numpy as np
import keyboard
from typing import Optional, Tuple
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class AutomatorTester:
    def __init__(self):
        self.running = True
        
    def test_screen_capture(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞"""
        try:
            logging.info("üß™ –¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞...")
            
            screenshot = pyautogui.screenshot()
            screen_width, screen_height = pyautogui.size()
            
            logging.info(f"‚úÖ –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {screen_width}x{screen_height}")
            logging.info(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {screenshot.size}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot.save("test_screenshot.png")
            logging.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'test_screenshot.png'")
            
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —ç–∫—Ä–∞–Ω–∞: {e}")
            return False
    
    def test_tesseract_ocr(self) -> bool:
        """–¢–µ—Å—Ç Tesseract OCR"""
        try:
            logging.info("üß™ –¢–µ—Å—Ç Tesseract OCR...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Tesseract
            version = pytesseract.get_tesseract_version()
            logging.info(f"‚úÖ –í–µ—Ä—Å–∏—è Tesseract: {version}")
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            screenshot = pyautogui.screenshot()
            screenshot_np = np.array(screenshot)
            gray = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2GRAY)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
            recognized_text = pytesseract.image_to_string(gray, lang=config.OCR_LANGUAGES)
            
            logging.info(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            logging.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {recognized_text[:200]}...")
            
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ Tesseract: {e}")
            return False
    
    def test_mouse_control(self) -> bool:
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é"""
        try:
            logging.info("üß™ –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
            current_pos = pyautogui.position()
            logging.info(f"üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –º—ã—à–∏: {current_pos}")
            
            # –î–≤–∏–≥–∞–µ–º –º—ã—à—å –≤ —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
            screen_width, screen_height = pyautogui.size()
            center_x, center_y = screen_width // 2, screen_height // 2
            
            logging.info(f"üéØ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º—ã—à–∏ –≤ —Ü–µ–Ω—Ç—Ä: ({center_x}, {center_y})")
            pyautogui.moveTo(center_x, center_y, duration=1.0)
            
            time.sleep(1)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º—ã—à—å –æ–±—Ä–∞—Ç–Ω–æ
            logging.info(f"üîô –í–æ–∑–≤—Ä–∞—Ç –º—ã—à–∏ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é: {current_pos}")
            pyautogui.moveTo(current_pos[0], current_pos[1], duration=1.0)
            
            logging.info("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é: {e}")
            return False
    
    def test_keyboard_control(self) -> bool:
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        try:
            logging.info("üß™ –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π...")
            
            logging.info("‚å®Ô∏è  –¢–µ—Å—Ç –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–æ—Ç–∫—Ä–æ–π—Ç–µ –ë–ª–æ–∫–Ω–æ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä)")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç—É –≤–≤–æ–¥–∞...")
            
            test_text = "Hello, World! –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
            
            # –í–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            for char in test_text:
                pyautogui.press(char)
                time.sleep(0.1)
            
            time.sleep(2)
            
            logging.info("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}")
            return False
    
    def test_telegram_detection(self) -> bool:
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Telegram"""
        try:
            logging.info("üß™ –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Telegram...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            import psutil
            telegram_found = False
            
            for proc in psutil.process_iter(['name']):
                if proc.info['name'] and any(name in proc.info['name'].lower() for name in ['telegram', 'telegram desktop']):
                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: {proc.info['name']}")
                    telegram_found = True
            
            if not telegram_found:
                logging.warning("‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω")
                logging.info("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram Desktop")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∫–Ω–∞ —á–µ—Ä–µ–∑ OCR
            screenshot = pyautogui.screenshot()
            screenshot_np = np.array(screenshot)
            gray = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2GRAY)
            
            recognized_text = pytesseract.image_to_string(gray, lang=config.OCR_LANGUAGES).lower()
            
            telegram_ui_elements = ["–ø–æ–∏—Å–∫", "—á–∞—Ç—ã", "–∫–æ–Ω—Ç–∞–∫—Ç—ã", "telegram"]
            found_elements = [elem for elem in telegram_ui_elements if elem in recognized_text]
            
            if found_elements:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Telegram: {found_elements}")
            else:
                logging.warning("‚ö†Ô∏è  –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return telegram_found or len(found_elements) > 0
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ Telegram: {e}")
            return False
    
    def test_rating_algorithm(self) -> bool:
        """–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ü–µ–Ω–æ–∫"""
        try:
            logging.info("üß™ –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ü–µ–Ω–æ–∫...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100 –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            ratings = []
            for _ in range(100):
                rand = random.random()
                if rand < 0.7:  # 70% - –æ—Ü–µ–Ω–∫–∏ 8-10
                    rating = random.choices([8, 9, 10], weights=[0.3, 0.4, 0.3])[0]
                elif rand < 0.85:  # 15% - –æ—Ü–µ–Ω–∫–∏ 6-7
                    rating = random.choices([6, 7], weights=[0.6, 0.4])[0]
                elif rand < 0.95:  # 10% - –æ—Ü–µ–Ω–∫–∏ 3-5
                    rating = random.choices([3, 4, 5], weights=[0.2, 0.3, 0.5])[0]
                else:  # 5% - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏
                    rating = random.choices([1, 2], weights=[0.6, 0.4])[0]
                
                ratings.append(rating)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            from collections import Counter
            rating_counts = Counter(ratings)
            
            logging.info("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ (100 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π):")
            for rating in sorted(rating_counts.keys()):
                percentage = (rating_counts[rating] / 100) * 100
                logging.info(f"   –û—Ü–µ–Ω–∫–∞ {rating}: {rating_counts[rating]} —Ä–∞–∑ ({percentage:.1f}%)")
            
            high_ratings = sum(rating_counts[r] for r in [8, 9, 10])
            low_ratings = sum(rating_counts[r] for r in [1, 2, 3, 4, 5])
            
            logging.info(f"üìà –í—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ (8-10): {high_ratings}%")
            logging.info(f"üìâ –ù–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ (1-5): {low_ratings}%")
            
            return True
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ü–µ–Ω–æ–∫: {e}")
            return False
    
    def interactive_test(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        print("\n" + "="*50)
        print("üß™ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¢–û–†–ê")
        print("="*50)
        
        tests = [
            ("–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞", self.test_screen_capture),
            ("Tesseract OCR", self.test_tesseract_ocr),
            ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é", self.test_mouse_control),
            ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", self.test_keyboard_control),
            ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ Telegram", self.test_telegram_detection),
            ("–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–æ–∫", self.test_rating_algorithm),
        ]
        
        for i, (test_name, test_func) in enumerate(tests, 1):
            print(f"\n{i}. {test_name}")
            
            choice = input("   –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç? (y/n): ").lower()
            if choice == 'y':
                try:
                    success = test_func()
                    if success:
                        print(f"   ‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
                    else:
                        print(f"   ‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            else:
                print(f"   ‚è≠Ô∏è  –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–ø—É—â–µ–Ω")
        
        print("\n" + "="*50)
        print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print("="*50)
    
    def quick_test(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logging.info("üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        critical_tests = [
            ("–ó–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞", self.test_screen_capture),
            ("Tesseract OCR", self.test_tesseract_ocr),
        ]
        
        all_passed = True
        for test_name, test_func in critical_tests:
            if not test_func():
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
                all_passed = False
            else:
                logging.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
        
        return all_passed

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import random
    
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¢–û–†–ê –ë–ò–ë–ò–ù–¢–û")
    print("=" * 60)
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)")
    print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç (–≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    tester = AutomatorTester()
    
    if choice == "1":
        if tester.quick_test():
            print("\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
    
    elif choice == "2":
        tester.interactive_test()
    
    elif choice == "3":
        print("üëã –í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()