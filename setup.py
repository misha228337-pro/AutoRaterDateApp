#!/usr/bin/env python3
"""
–£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
"""

import subprocess
import sys
import os

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        return False
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏–∏ {sys.version_info.major}.{sys.version_info.minor} –Ω–∞–π–¥–µ–Ω")
    return True

def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def check_tesseract():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Tesseract OCR"""
    try:
        import pytesseract
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é Tesseract
        version = pytesseract.get_tesseract_version()
        print(f"‚úÖ Tesseract OCR –≤–µ—Ä—Å–∏–∏ {version} –Ω–∞–π–¥–µ–Ω")
        return True
    except Exception as e:
        print("‚ùå Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract OCR:")
        print("   1. –°–∫–∞—á–∞–π—Ç–µ —Å: https://github.com/UB-Mannheim/tesseract/wiki")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –æ—Ç–º–µ—Ç–∏–≤ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
        print("   3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤ config.py")
        return False

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = ["logs", "screenshots"]
    for dir_name in directories:
        try:
            os.makedirs(dir_name, exist_ok=True)
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{dir_name}' —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{dir_name}': {e}")
            return False
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("=" * 50)
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ Bibinto")
    print("=" * 50)
    
    steps = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python", check_python_version),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python", install_requirements),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR", check_tesseract),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", create_directories),
    ]
    
    failed_steps = []
    
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        if not step_func():
            failed_steps.append(step_name)
    
    print("\n" + "=" * 50)
    if failed_steps:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–±–ª–µ–º—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö:")
        for step in failed_steps:
            print(f"   - {step}")
        print("\nüìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–Ω–æ–≤–æ")
    else:
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É:")
        print("   python telegram_bot_automator_v2.py")
    print("=" * 50)

if __name__ == "__main__":
    main()